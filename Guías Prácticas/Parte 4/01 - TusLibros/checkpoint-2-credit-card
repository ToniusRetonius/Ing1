!classDefinition: #CartTest category: #TusLibrosDotCom!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom'!

!CartTest methodsFor: 'tests' stamp: 'tom 6/13/2025 20:02:57'!
test01WhenCartIsCreatedIsEmpty
	
	| catalogue |
	catalogue := Catalogue with: Dictionary new.
	self assert: (Cart on: catalogue ) isEmpty ! !

!CartTest methodsFor: 'tests' stamp: 'tom 6/13/2025 20:03:07'!
test02WhenAddingABookToTheCartTheBookQuantityMustBePositive
	
	| cart catalogue |
	catalogue := Catalogue with: Dictionary new.
	cart := Cart on: catalogue.
	self should: [cart add: #Libro withQuantity: 0.] raise: Error  withMessageText: 'The amount of book added must be positive!!'! !

!CartTest methodsFor: 'tests' stamp: 'tom 6/13/2025 20:03:25'!
test03WhenAddingABookToTheCartTheBookThatIsFromTheEditorialShouldntFail
	
	| cart catalogue books |
	books := Dictionary new.
	books at: #Libro put: 100.
	catalogue := Catalogue with: books .
	
	cart := Cart on:catalogue.
	
	self deny: (cart add: #Libro withQuantity: 1) isEmpty ! !

!CartTest methodsFor: 'tests' stamp: 'tom 6/13/2025 20:04:35'!
test04WhenAddingABookToTheCartTheBookThatIsNotFromTheEditorialShouldFail
	
	| cart catalogue |
	catalogue := Catalogue with: Dictionary new.
	
	cart := Cart on:catalogue.
	
	self should: [cart add:#Libro  withQuantity:3 .] raise: Error withMessageText:[Cart bookNotFromEditorialError]. ! !

!CartTest methodsFor: 'tests' stamp: 'tom 6/13/2025 20:05:05'!
test05WhenAddingABookToTheCartTheBookThatIsFromTheEditorialThatIsAlreadyInCartAddsQuantity
	
	| cart catalogue books |
	books := Dictionary new.
	books at:#Libro put: 100.
	catalogue := Catalogue with: books .
	cart := Cart on:catalogue.
	cart add: #Libro withQuantity: 10; add: #Libro withQuantity: 10.
	
	self assert: (cart quantityOfBookInCart: #Libro) equals: 20.! !


!classDefinition: #CashierTest category: #TusLibrosDotCom!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom'!

!CashierTest methodsFor: 'setup' stamp: 'tom 6/17/2025 18:05:51'!
validCard
	 ^CreditCard dated: GregorianMonthOfYear current .! !


!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:24:56'!
test01CashierCheckoutsEmptyCartRaisesError
	
	| cart cashier books catalogue card |
	card := self validCard .
	books := Dictionary new.
	catalogue := Catalogue with: books.
	cart := Cart on:catalogue.
	cashier := Cashier on: cart withCatalogue: catalogue .
	
	self should: [cashier checkoutWithCard: card] raise:  Error withMessageText: 'Empty cart cannot be checked out!!'.! !

!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:08:44'!
test02CashierCheckoutsSingleBookCartReturnsItsValue
	
	| cart cashier books catalogue card |
	card := self validCard .
	books := Dictionary new.
	books at: #Libro put: 100.
	catalogue := Catalogue with: books.
	cart := Cart on:catalogue.
	cart add: #Libro withQuantity: 1.
	 
	cashier := Cashier on: cart withCatalogue: catalogue .
	
	self assert: (cashier checkoutWithCard: card) equals: 100.
	! !

!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:24:22'!
test03CashierCheckoutsManyBookCartReturnsItsTotal
	
	| cart cashier books catalogue card |
	card := self validCard .
	books := Dictionary new.
	books at: #Libro put: 100.
	catalogue := Catalogue with: books.
	cart := Cart on:catalogue.
	cart add: #Libro withQuantity: 10.
	 
	cashier := Cashier on: cart withCatalogue: catalogue .
	
	self assert: (cashier checkoutWithCard: card) equals: 1000.
	! !

!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:32:15'!
test04CashierCannotCheckoutCartWithExpiratedCard
	
	| creditCard cart cashier books catalogue|
	creditCard := CreditCard dated: (GregorianMonthOfYear juneOf: (GregorianYear number: 2000)).
	books := Dictionary new.
	books at: #Libro put: 100.
	catalogue := Catalogue with: books.
	cart := Cart on:catalogue.
	cart add: #Libro withQuantity: 1.
	cashier := Cashier on: cart withCatalogue: catalogue .
	
	self should: [cashier checkoutWithCard: creditCard ] raise: Error  withMessageText: 'The card is Expired'. ! !

!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:29:59'!
test05CashierRegistersSaleInSalesBook! !

!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:32:42'!
test06CashierValidatesCardUsingMerchantProcessor! !

!CashierTest methodsFor: 'tests' stamp: 'tom 6/17/2025 18:30:29'!
test07CashierRejectsCheckoutWhenCardHasNoMoney! !


!classDefinition: #Cart category: #TusLibrosDotCom!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom'!

!Cart methodsFor: 'initialization' stamp: 'tom 6/13/2025 17:51:53'!
initializeOn: aCatalogue 
	books := Dictionary new.
	catalogue := aCatalogue.! !


!Cart methodsFor: 'accessing' stamp: 'tom 6/10/2025 21:35:23'!
isEmpty
	^books isEmpty ! !

!Cart methodsFor: 'accessing' stamp: 'tom 6/13/2025 20:15:55'!
items
	^ (books keys) asOrderedCollection ! !

!Cart methodsFor: 'accessing' stamp: 'tom 6/13/2025 18:03:28'!
quantityOfBookInCart: aBook 
	
	self assertBookInBooks: aBook .
	
	^books at:aBook .! !


!Cart methodsFor: 'adding book' stamp: 'tom 6/13/2025 18:14:12'!
add: aBook withQuantity: aQuantity 
	
	
	self assertQuantityIsPositive: aQuantity.
	self assertBookIsFromEditorial: aBook .
	
	books at: aBook put: ((self assertBookQuantityInCart:aBook ) + aQuantity) .
	! !


!Cart methodsFor: 'assertion' stamp: 'tom 6/13/2025 18:10:57'!
assertBookInBooks: aBook 
	
	((books at:aBook ifAbsent: 0) > 0) ifFalse: [self error: self class bookNotInCartMessageError].
	
! !

!Cart methodsFor: 'assertion' stamp: 'tom 6/13/2025 19:30:59'!
assertBookIsFromEditorial: aBook 
	
	"(catalogue includes: aBook) ifFalse: [self error: self class BookNotFromEditorialError]. -- luego de reificar con el cata패logo como un objeto, esto cambia"
	catalogue isBookInCatalogue: aBook ! !

!Cart methodsFor: 'assertion' stamp: 'tom 6/13/2025 18:11:48'!
assertBookQuantityInCart: aBook 
	
	^ books at:aBook ifAbsent:0.! !

!Cart methodsFor: 'assertion' stamp: 'tom 6/13/2025 17:47:49'!
assertQuantityIsPositive: aQuantity 
	
	(aQuantity > 0) ifFalse: [self error: self class quantityAddedIsNotPositiveMessageError]! !


!Cart methodsFor: 'checkout' stamp: 'tom 6/13/2025 20:59:17'!
calculateCost
	^(books keys) inject:0 into:[:sum :item | sum + ((catalogue calculatePriceOf: item) * (books at:item ))].! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Cart class' category: #TusLibrosDotCom!
Cart class
	instanceVariableNames: ''!

!Cart class methodsFor: 'instance creation' stamp: 'tom 6/13/2025 20:06:07'!
on: catalogue 
	^self new initializeOn: catalogue ! !


!Cart class methodsFor: 'error message' stamp: 'tom 6/13/2025 19:32:25'!
bookNotFromEditorialError
	^'El libro no esta패 en la editorial'! !

!Cart class methodsFor: 'error message' stamp: 'tom 6/13/2025 18:01:57'!
bookNotInCartMessageError
	^'The book asked is not in cart'! !

!Cart class methodsFor: 'error message' stamp: 'tom 6/13/2025 17:48:15'!
quantityAddedIsNotPositiveMessageError
	^'The amount of book added must be positive!!'! !


!classDefinition: #Cashier category: #TusLibrosDotCom!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom'!

!Cashier methodsFor: 'initialization' stamp: 'tom 6/13/2025 19:55:45'!
initializeOn: aCart withCatalogue: aCatalogue 

	cart := aCart.
	catalogue := aCatalogue.! !


!Cashier methodsFor: 'checkout' stamp: 'tom 6/17/2025 17:20:29'!
checkoutWithCard: creditCard 
	
	self assertCreditCardNotExpired: creditCard .
	self assertCartNotEmpty .
	
	"esto vale si seguimos la idea de que el cashier es una instancia u패nica"
	"^ cart items inject:0 into:[:sum :item | sum + (catalogue calculatePriceOf: item)]."
	^cart calculateCost! !


!Cashier methodsFor: 'assertion' stamp: 'tom 6/13/2025 20:08:42'!
assertCartNotEmpty
	(cart isEmpty) ifTrue: [self error: self class emptyCartMessageError].! !

!Cashier methodsFor: 'assertion' stamp: 'tom 6/17/2025 18:39:27'!
assertCreditCardNotExpired: creditCard 
	creditCard isExpired! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Cashier class' category: #TusLibrosDotCom!
Cashier class
	instanceVariableNames: ''!

!Cashier class methodsFor: 'instance creation' stamp: 'tom 6/13/2025 19:54:43'!
on: aCart withCatalogue: aCatalogue 
	^self new initializeOn: aCart withCatalogue: aCatalogue ! !


!Cashier class methodsFor: 'error message' stamp: 'tom 6/13/2025 19:18:52'!
emptyCartMessageError
	^'Empty cart cannot be checked out!!'! !


!classDefinition: #Catalogue category: #TusLibrosDotCom!
Object subclass: #Catalogue
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom'!

!Catalogue methodsFor: 'initialization' stamp: 'tom 6/13/2025 20:02:47'!
initializeWith: aDictionaryOfBooks 
	
	catalogue := aDictionaryOfBooks.! !


!Catalogue methodsFor: 'assertion' stamp: 'tom 6/13/2025 20:04:24'!
isBookInCatalogue: aBook 
	catalogue at: aBook ifAbsent: [self error: self class bookNotFromEditorialError].! !


!Catalogue methodsFor: 'checkout' stamp: 'tom 6/13/2025 20:17:12'!
calculatePriceOf: item 
	
	^ catalogue at:item ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Catalogue class' category: #TusLibrosDotCom!
Catalogue class
	instanceVariableNames: ''!

!Catalogue class methodsFor: 'instance creation' stamp: 'tom 6/13/2025 19:25:43'!
with: aCollectionOfBooks 
	^self new initializeWith: aCollectionOfBooks ! !


!Catalogue class methodsFor: 'error message' stamp: 'tom 6/13/2025 19:33:01'!
bookNotFromEditorialError
	^'El libro no esta패 en la editorial'! !


!classDefinition: #CreditCard category: #TusLibrosDotCom!
Object subclass: #CreditCard
	instanceVariableNames: 'number issueDate expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom'!

!CreditCard methodsFor: 'initialization' stamp: 'tom 6/17/2025 18:23:47'!
initializeDated: aMonthAndYear 
	
	issueDate := aMonthAndYear .
	expirationDate :=  GregorianMonthOfYear year: (((aMonthAndYear year) nextNumberOfYears: 2)) month: (aMonthAndYear month).! !


!CreditCard methodsFor: 'assertion' stamp: 'tom 6/17/2025 17:47:46'!
isExpired
	"si la fecha de expiracio패n en menor, entonces esta패 vencida"
	| actual |
	actual :=  (GregorianMonthOfYear current).
	(actual < expirationDate) ifFalse: [self error: self class expiredCardMessageError].! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'CreditCard class' category: #TusLibrosDotCom!
CreditCard class
	instanceVariableNames: ''!

!CreditCard class methodsFor: 'instance creation' stamp: 'tom 6/13/2025 20:52:26'!
dated: aMonthAndYear 

	^self new initializeDated: aMonthAndYear ! !


!CreditCard class methodsFor: 'error message' stamp: 'tom 6/17/2025 17:55:08'!
expiredCardMessageError
	^'The card is Expired'! !
